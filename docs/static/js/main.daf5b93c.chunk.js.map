{"version":3,"sources":["style.module.css","components/FormWeather.js","components/WeatherCard.js","components/MessageCard.js","components/App.js","index.js"],"names":["module","exports","FormWeather","props","onInputChange","e","setState","input","target","value","onRadioClick","tempUnit","unit","onFormSubmit","a","preventDefault","submitCallback","state","axios","get","params","q","appid","units","then","data","catch","err","request","res","this","onSubmit","className","styles","form","formInput","type","placeholder","onChange","required","htmlFor","formTempLabel","id","name","onClick","formSubmitBtn","React","Component","WeatherCard","city","main","sys","weather","sunrise","Date","toLocaleTimeString","sunset","getUnit","weatherCard","weatherCardHeader","country","temp","feels_like","humidity","description","MessageCard","message","status","statusText","App","inputCity","resAPI","renderOptions","undefined","app","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.daf5b93c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"style_app__3YBiT\",\"form\":\"style_form__sWyHs\",\"formInput\":\"style_formInput__7MWzB\",\"formTempLabel\":\"style_formTempLabel__3EqZ9\",\"formSubmitBtn\":\"style_formSubmitBtn__2E1y7\",\"weatherCard\":\"style_weatherCard__2FYhu\",\"weatherCardHeader\":\"style_weatherCardHeader__pBQcA\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport styles from '../style.module.css';\n\nclass FormWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: '',\n      unit: '',\n    };\n  }\n\n  onInputChange = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  onRadioClick = (tempUnit) => {\n    this.setState({ unit: tempUnit });\n  };\n\n  onFormSubmit = async (e) => {\n    e.preventDefault();\n    const { submitCallback } = this.props;\n    const { unit, input } = this.state;\n\n    const res = await axios\n      .get('https://api.openweathermap.org/data/2.5/weather', {\n        params: {\n          q: input,\n          appid: '579fd364faebae12bc5fa73c09e893e3',\n          units: unit,\n        },\n      })\n      .then((data) => data)\n      .catch((err) => err.request);\n\n    submitCallback(res, unit);\n  };\n\n  render() {\n    const { input } = this.state;\n\n    return (\n      <form onSubmit={this.onFormSubmit} className={styles.form}>\n        <header>\n          <h1>Weather App</h1>\n        </header>\n\n        <input\n          className={styles.formInput}\n          type='text'\n          value={input}\n          placeholder='Enter Name of City'\n          onChange={this.onInputChange}\n          required\n        />\n\n        <label htmlFor='celsius' className={styles.formTempLabel}>\n          <input\n            type='radio'\n            id='celsius'\n            name='temp'\n            onClick={() => this.onRadioClick('metric')}\n            required\n          />\n          Celsius\n        </label>\n\n        <label htmlFor='fahrenheit' className={styles.formTempLabel}>\n          <input\n            type='radio'\n            id='fahrenheit'\n            name='temp'\n            onClick={() => this.onRadioClick('imperial')}\n            required\n          />\n          Fahrenheit\n        </label>\n\n        <button type='submit' className={styles.formSubmitBtn}>\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nFormWeather.propTypes = {\n  submitCallback: PropTypes.func.isRequired,\n};\n\nexport default FormWeather;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../style.module.css';\n\nconst WeatherCard = ({ city, tempUnit }) => {\n  const { main, name, sys, weather } = city.data;\n  const sunrise = new Date(sys.sunrise * 1000).toLocaleTimeString();\n  const sunset = new Date(sys.sunset * 1000).toLocaleTimeString();\n\n  const getUnit = () => {\n    if (tempUnit === 'metric') {\n      return 'ºC';\n    }\n    return 'ºF';\n  };\n\n  return (\n    <section className={styles.weatherCard}>\n      <h2 className={styles.weatherCardHeader}>{`${name}, ${sys.country}`}</h2>\n      <p>{`Temp: ${main.temp} ${getUnit()}`}</p>\n      <p>{`Feels Like: ${main.feels_like} ${getUnit()}`}</p>\n      <br />\n      <p>{`Humidity: ${main.humidity}%`}</p>\n      <p>{`Weather: ${weather[0].main}`}</p>\n      <p>{`Sky: ${weather[0].description}`}</p>\n      <br />\n      <p>{`Sunrise: ${sunrise}`}</p>\n      <p>{`Sunset: ${sunset}`}</p>\n    </section>\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.shape.isRequired,\n  tempUnit: PropTypes.string.isRequired,\n};\n\nexport default WeatherCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MessageCard = ({ message }) => (\n  <section>\n    <h1>{`Error ${message.status}`}</h1>\n    <h1>{message.statusText}</h1>\n  </section>\n);\n\nMessageCard.propTypes = {\n  message: PropTypes.shape.isRequired,\n};\n\nexport default MessageCard;\n","import React from 'react';\nimport FormWeather from './FormWeather';\nimport WeatherCard from './WeatherCard';\nimport MessageCard from './MessageCard';\nimport styles from '../style.module.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      resAPI: '',\n      tempUnit: '',\n    };\n  }\n\n  submitCallback = (inputCity, unit) => {\n    this.setState({ resAPI: inputCity, tempUnit: unit });\n  };\n\n  renderOptions = () => {\n    const { resAPI, tempUnit } = this.state;\n\n    if (resAPI.status === 200) {\n      return <WeatherCard city={resAPI} tempUnit={tempUnit} />;\n    }\n    if (resAPI.status === undefined) {\n      return null;\n    }\n    return <MessageCard message={resAPI} />;\n  };\n\n  render() {\n    return (\n      <div className={styles.app}>\n        <FormWeather submitCallback={this.submitCallback} />\n        {this.renderOptions()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}